// Defense task handles spotted invaders. Spawns defenders and gives them special behaviour.
let e={};module.exports=e,e.register=(()=>{}),e.handleNewInvader=(e=>{if(SPAWN_DEFENSE_ON_ATTACK&&!DEFENSE_BLACKLIST.includes(e.pos.roomName)){if(!e.room.my&&!e.room.reserved){let n=e=>Flag.compare(e,FLAG_COLOR.invade.exploit)||e.color==FLAG_COLOR.claim.color,o=FlagDir.find(n,e.pos,!0);if(!o)return}e.room.defenseLevel.sum>e.room.hostileThreatLevel||e.room.hostiles.forEach(Task.defense.orderDefenses)}}),e.handleGoneInvader=(e=>{let n=Game.getObjectById(e);if(!n){let n=Task.defense.memory(e);if(n&&n.defender){let o=n=>{let o=Memory.rooms[n.spawnRoom];if(o&&o.spawnQueueHigh){let n=n=>n.destiny&&"defense"===n.destiny.task&&n.destiny.invaderId===e,d=o.spawnQueueHigh.findIndex(n);d>-1&&o.spawnQueueHigh.splice(d,1)}};n.defender.forEach(o)}Task.clearMemory("defense",e)}}),e.handleCreepDied=(e=>{let n=Memory.population[e];if(n&&n.destiny&&n.destiny.task&&"defense"==n.destiny.task&&n.destiny.invaderId){let e=Game.getObjectById(n.destiny.invaderId);if(e){let o=Task.defense.memory(n.destiny.invaderId);if(o.defender){let e=e=>e.order===n.destiny.order,d=o.defender.findIndex(e);d>-1&&o.defender.splice(d,1)}Task.defense.orderDefenses(e)}}}),e.memory=(e=>{return Task.memory("defense",e)}),e.creep={defender:{fixedBody:[ATTACK,MOVE],multiBody:{[HEAL]:1,[MOVE]:2,[ATTACK]:2,[TOUGH]:1},name:"defender",behaviour:"melee"}},e.orderDefenses=(e=>{let n=e.id,o=e.threat,d=Task.defense.memory(n);if(d.defender){let e=e=>o-=e.threat;d.defender.forEach(e)}else d.defender=[];for(;o>0;){let d=global.guid();Task.defense.creep.defender.queue=e.room.my?"High":"Medium",Task.defense.creep.defender.minThreat=1.1*o;let r=Task.spawn(Task.defense.creep.defender,{task:"defense",targetName:n,invaderId:n,spottedIn:e.pos.roomName,order:d},{targetRoom:e.pos.roomName,maxRange:4,minEnergyCapacity:800,allowTargetRoom:!0},e=>{let o=Task.defense.memory(n);o.defender.push({spawnRoom:e.queueRoom,order:e.destiny.order}),DEBUG&&global.logSystem(e.queueRoom,`Defender queued for hostile creep ${e.destiny.order} in ${e.destiny.spottedIn}`)});if(!r)return void((TRACE||DEBUG)&&trace("Task",{task:"defense",invaderId:n,targetRoom:e.pos.roomName},"Unable to spawn. Invader will not get handled!"));{let e=Creep.bodyThreat(r.parts);o-=e}}}),e.nextAction=(e=>{if(!(Creep.action.defending.isValidAction(e)&&Creep.action.defending.isAddableAction(e)&&Creep.action.defending.assign(e))){let n=Game.getObjectById(e.data.destiny.invaderId);if(n&&e.pos.roomName===n.pos.roomName)return void Creep.action.travelling.assign(e,n);let o=Game.rooms[e.data.destiny.spottedIn];if(!o||o.hostiles.length>0)return Creep.action.travelling.assignRoom(e,e.data.destiny.spottedIn);let d=e=>Game.rooms[e]&&Game.rooms[e].hostiles.length>0,r=e.room.adjacentRooms.find(d);if(r)return Creep.action.travelling.assignRoom(e,r);let a=Game.spawns[e.data.motherSpawn];a&&Creep.action.recycling.assign(e,a)}});