const e={};module.exports=e,e.analyzeRoom=function(e){e.hostiles.length>0&&e.processInvaders()};const t=e=>{const t=JSON.stringify(_.countBy(e.body,"type"));(global.DEBUG||NOTIFICATE_INVADER||NOTIFICATE_INTRUDER&&e.room.my||NOTIFICATE_HOSTILES)&&logSystem(e.pos.roomName,`Hostile intruder (${t}) from "${e.owner.username}".`),(NOTIFICATE_INVADER||NOTIFICATE_INTRUDER&&"Invader"!==e.owner.username&&e.room.my||NOTIFICATE_HOSTILES&&"Invader"!==e.owner.username)&&Game.notify(`Hostile intruder ${e.id} (${t}) from "${e.owner.username}" in room ${e.pos.roomName} at ${toDateTimeString(toLocalDate(new Date))}`),Room.newInvader.trigger(e)},s=e=>Room.knownInvader.trigger(e),i=e=>Room.goneInvader.trigger(e);e.executeRoom=function(e,o){const n=Util.startProfiling(o+".defense.execute",{enabled:PROFILING.ROOMS}),r=Game.rooms[o];r?(r.goneInvader.forEach(i),n.checkCPU("goneInvader",.5),r.hostileIds.forEach(s),n.checkCPU("knownInvaders",.5),r.newInvader.forEach(t),n.checkCPU("newInvaders",.5)):(e.hostileIds&&_.forEach(e.hostileIds,s),n.checkCPU("knownInvadersNoSight",.5))},e.extend=function(){Object.defineProperties(Room.prototype,{combatCreeps:{configurable:!0,get:function(){return _.isUndefined(this._combatCreeps)&&(this._combatCreeps=this.creeps.filter(e=>["melee","ranger","healer","warrior"].includes(e.data.creepType))),this._combatCreeps}},casualties:{configurable:!0,get:function(){if(_.isUndefined(this._casualties)){var e=e=>e.hits<e.hitsMax&&(void 0===e.towers||0==e.towers.length);this._casualties=_.sortBy(_.filter(this.creeps,e),"hits")}return this._casualties}},conserveForDefense:{configurable:!0,get:function(){return this.my&&this.storage&&this.storage.charge<0}},defenseLevel:{configurable:!0,get:function(){if(_.isUndefined(this._defenseLevel)){this._defenseLevel={towers:0,creeps:0,sum:0};let e=e=>{this._defenseLevel.creeps+=e.threat};this.combatCreeps.forEach(e),this._defenseLevel.towers=this.structures.towers.length,this._defenseLevel.sum=this._defenseLevel.creeps+this._defenseLevel.towers*Creep.partThreat.tower}return this._defenseLevel}},hostile:{configurable:!0,get:function(){return this.memory.hostile}},hostiles:{configurable:!0,get:function(){return _.isUndefined(this._hostiles)&&(this._hostiles=this.find(FIND_HOSTILE_CREEPS,{filter:Task.reputation.hostileOwner})),this._hostiles}},hostileIds:{configurable:!0,get:function(){return _.isUndefined(this._hostileIds)&&(this._hostileIds=_.map(this.hostiles,"id")),this._hostileIds}},hostileThreatLevel:{configurable:!0,get:function(){if(_.isUndefined(this._hostileThreatLevel)){this._hostileThreatLevel=0;let e=e=>{this._hostileThreatLevel+=e.threat};this.hostiles.forEach(e)}return this._hostileThreatLevel}}}),Room.prototype.processInvaders=function(){let e=this;void 0===this.memory.hostileIds&&(this.memory.hostileIds=[]),SEND_STATISTIC_REPORTS?void 0===this.memory.statistics&&(this.memory.statistics={}):delete this.memory.statistics;let t=t=>{if(!Room.isCenterNineRoom(this.name)&&!e.memory.hostileIds.includes(t.id)&&(e.memory.hostileIds.push(t.id),e.newInvader.push(t),SEND_STATISTIC_REPORTS)){let s=JSON.stringify(_.countBy(t.body,"type"));void 0===e.memory.statistics.invaders&&(e.memory.statistics.invaders=[]),e.memory.statistics.invaders.push({owner:t.owner.username,id:t.id,body:s,enter:Game.time,time:Date.now()})}};_.forEach(this.hostiles,t);let s=t=>{const s=Game.getObjectById(t),i=!s||Task.reputation.hostileOwner(s);if(!e.hostileIds.includes(t)&&!i&&(e.goneInvader.push(t),SEND_STATISTIC_REPORTS&&e.memory.statistics&&void 0!==e.memory.statistics.invaders&&e.memory.statistics.invaders.length>0)){let s=e=>e.id==t&&void 0===e.leave,i=_.find(e.memory.statistics.invaders,s);void 0!=i&&(i.leave=Game.time)}};_.forEach(this.memory.hostileIds,s),this.memory.hostileIds=this.hostileIds},Room.prototype.registerIsHostile=function(){this.controller&&(_.isUndefined(this.hostile)||"number"==typeof this.hostile)&&(!this.controller.owner||this.controller.my||this.ally?delete this.memory.hostile:this.memory.hostile=this.controller.level)}},e.flushRoom=function(e){e.newInvader=[],e.goneInvader=[]};