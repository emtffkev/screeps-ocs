const e={};module.exports=e,e.analyzeRoom=function(e,i){i&&e.saveMinerals()},e.extend=function(){Object.defineProperties(Room.prototype,{droppedResources:{configurable:!0,get:function(){return _.isUndefined(this._droppedResources)&&(this._droppedResources=this.find(FIND_DROPPED_RESOURCES)),this._droppedResources}},minerals:{configurable:!0,get:function(){if(_.isUndefined(this._minerals)){this._minerals=[];let e=e=>{addById(this._minerals,e)};_.forEach(this.memory.minerals,e)}return this._minerals}},mineralType:{configurable:!0,get:function(){if(_.isUndefined(this.memory.mineralType)){let e=this.find(FIND_MINERALS);e&&e.length>0?this.memory.mineralType=e[0].mineralType:this.memory.mineralType=""}return this.memory.mineralType}},sources:{configurable:!0,get:function(){if((_.isUndefined(this.memory.sources)||"sim"==this.name)&&(this._sources=this.find(FIND_SOURCES),this._sources.length>0?this.memory.sources=this._sources.map(e=>e.id):this.memory.sources=[]),_.isUndefined(this._sources)){this._sources=[];var e=e=>{addById(this._sources,e)};this.memory.sources.forEach(e)}return this._sources}},sourceAccessibleFields:{configurable:!0,get:function(){if(_.isUndefined(this.memory.sourceAccessibleFields)){let i=0,s=this.sources;var e=e=>i+=e.accessibleFields;_.forEach(s,e),this.memory.sourceAccessibleFields=i}return this.memory.sourceAccessibleFields}},sourceEnergyAvailable:{configurable:!0,get:function(){if(_.isUndefined(this._sourceEnergyAvailable)){this._sourceEnergyAvailable=0;var e=e=>this._sourceEnergyAvailable+=e.energy;_.forEach(this.sources,e)}return this._sourceEnergyAvailable}},ticksToNextRegeneration:{configurable:!0,get:function(){return _.isUndefined(this._ticksToNextRegeneration)&&(this._ticksToNextRegeneration=_(this.sources).map("ticksToRegeneration").min()||0),this._ticksToNextRegeneration}}}),Room.prototype.saveMinerals=function(){let e=e=>{return{x:e.pos.x,y:e.pos.y}},i=this.structures.all.filter(e=>e.structureType===STRUCTURE_EXTRACTOR&&e.isActive()).map(e),s=e=>_.some(i,{x:e.pos.x,y:e.pos.y});const n=this.find(FIND_MINERALS).filter(s);if(n.length>0){let e=e=>e.id;this.memory.minerals=_.map(n,e)}else delete this.memory.minerals}};