// useful commands
Creep.action.recycling.assign(Game.creeps["<creepName>"]),_.forEach(Memory.rooms,e=>delete e.roadConstructionTrace),_.forEach(Game.constructionSites,e=>e.remove()),Game.spawns["<spawnName>"].createCreepBySetup(Creep.setup.worker),Game.rooms["<roomName>"].spawnQueueLow.push({parts:[MOVE,WORK,CARRY],name:"max",setup:"worker"}),Task.forceSpawn(Task.claim.creep.claimer,"W0N0"),Task.forceSpawn(Task.guard.creep.guard,{targetRoom:"W0N0",allowTargetRoom:!0},"Flag22"),Memory.rooms["<roomName>"].spawnQueueLow=[0],Memory.rooms["<roomName>"].spawnQueueMedium=[0],Memory.rooms["<roomName>"].spawnQueueHigh=[0],Util.inQueue("defender"),Util.inQueue({behaviour:"defender"}),Util.inQueue({behaviour:"remoteMiner",room:"W0N0"}),Game.creeps["<creepName>"].move(RIGHT),Game.creeps["<creepName>"].data.creepType="recycler",getPath("<originalModuleName>",!0),delete Memory.modules,_.forEach(Memory,(e,o)=>!["population"].includes(o)&&delete Memory[o]),Game.market.createOrder(type,resourceType,price,totalAmount,roomName),Game.market.deal(orderId,amount,roomName),_.forEach(Memory.rooms,e=>delete e.heatmap),Game.rooms["<roomName>"].placeReactionOrder("<labId>","<resourceId>","<amount>"),Game.rooms["<roomName>"].setStore("<structure>","<resource>","<amount>"),Game.rooms["<roomName>"].placeOrder("<structure>","<resource>","<amount>"),_.values(Game.structures).filter(e=>"lab"===e.structureType).map(e=>e.room.setStore(e.id,RESOURCE_ENERGY,2e3)),_.chain(Game.spawns).values().map(e=>e.room).unique().filter(e=>e.spawnQueueLow.length).map(e=>[`====${e.name}====>`,e.spawnQueueLow.map(e=>e.name)]).value(),JSON.stringify(_.chain(Game.creeps).filter(e=>"remoteHauler"===e.data.creepType).groupBy("data.weight").mapValues(e=>e.length)),FlagDir.filter(FLAG_COLOR.defense).map(e=>Game.flags[e.name]).map(e=>e.setPosition(new RoomPosition(e.pos.x,e.pos.y,"<roomName>")));