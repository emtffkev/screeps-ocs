// This task will react on labTech flags purple/white
const e={};module.exports=e,e.register=(()=>{Flag.found.on(e=>Task.labTech.handleFlagFound(e)),Creep.spawningStarted.on(e=>Task.labTech.handleSpawningStarted(e)),Creep.spawningCompleted.on(e=>Task.labTech.handleSpawningCompleted(e)),Creep.predictedRenewal.on(e=>Task.labTech.handleCreepDied(e.name)),Creep.died.on(e=>Task.labTech.handleCreepDied(e))}),e.handleFlagFound=(e=>{e.color==FLAG_COLOR.labs.labTech.color&&e.secondaryColor==FLAG_COLOR.labs.labTech.secondaryColor&&Task.labTech.checkForRequiredCreeps(e)}),e.checkForRequiredCreeps=(e=>{const a=Task.labTech.memory(e),n=a.queued.length+a.spawning.length+a.running.length;n<1&&Task.spawn(Task.labTech.creep.labTech,{task:"labTech",targetName:e.name},{targetRoom:e.pos.roomName,minEnergyCapacity:1e3,maxRange:1,allowTargetRoom:!0},e=>{let a=Task.labTech.memory(Game.flags[e.destiny.targetName]);a.queued.push({room:e.queueRoom,name:e.name})})}),e.handleSpawningStarted=(e=>{if(e.destiny&&e.destiny.task&&"labTech"==e.destiny.task){let a=Game.flags[e.destiny.targetName||e.destiny.flagName];if(a){const n=Task.labTech.memory(a);n.spawning.push(e);const o=[],t=e=>{let a=Game.rooms[e.room];(a.spawnQueueMedium.some(a=>a.name==e.name)||a.spawnQueueLow.some(a=>a.name==e.name))&&o.push(e)};n.queued.forEach(t),n.queued=o}}}),e.handleSpawningCompleted=(e=>{if(e.data&&e.data.destiny&&e.data.destiny.task&&"labTech"==e.data.destiny.task){let a=Game.flags[e.data.destiny.targetName||e.data.destiny.flagName];if(a){e.data.predictedRenewal=e.data.spawningTime+50*routeRange(e.data.homeRoom,a.pos.roomName);const n=Task.labTech.memory(a);n.running.push(e.name);const o=[],t=e=>{const a=Game.spawns[e.spawn];a&&(a.spawning&&a.spawning.name==e.name||a.newSpawn&&a.newSpawn.name==e.name)&&o.push(e)};n.spawning.forEach(t),n.spawning=o}}}),e.handleCreepDied=(e=>{const a=Memory.population[e];if(a&&a.destiny&&a.destiny.task&&"labTech"==a.destiny.task){const n=Game.flags[a.destiny.targetName||a.destiny.flagName];if(n){const a=Task.labTech.memory(n),o=[],t=a=>{const t=Game.creeps[a];t&&t.name!=e&&void 0!==t.data&&void 0!==t.data.spawningTime&&t.ticksToLive>t.data.spawningTime+25*routeRange(t.data.homeRoom,n.pos.roomName)&&o.push(a)};a.running.forEach(t),a.running=o}}}),e.memory=(e=>{return e.memory.tasks||(e.memory.tasks={}),e.memory.tasks.labTech||(e.memory.tasks.labTech={queued:[],spawning:[],running:[]}),e.memory.tasks.labTech}),e.creep={labTech:{fixedBody:[WORK,CARRY,MOVE],multiBody:[CARRY,CARRY,MOVE],name:"labTech",behaviour:"labTech",queue:"Low"}};