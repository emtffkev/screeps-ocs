const e={};module.exports=e,e.analyzeRoom=function(e){Room.needMemoryResync(e)&&(e.saveObserver(),e.structures.observer&&e.initObserverRooms())},e.executeRoom=function(e){const o=Util.startProfiling("Room.observers.executeRoom",{enabled:PROFILING.ROOMS}),r=Game.rooms[e];r&&(r.structures.observer&&r.controlObserver(),o.checkCPU(e+".controlObserver",.5))},e.extend=function(){Room.prototype.controlObserver=function(){const e=this.structures.observer;if(e){this.memory.observer.rooms||this.initObserverRooms();let o;if(observerRequests.length>0)for(const r of observerRequests)if(Game.map.getRoomLinearDistance(this.name,r.roomName)<=10&&!Memory.observerSchedule.includes(r.roomName)){const e=r.room||Game.rooms[r.roomName];if(e&&e.creeps&&e.creeps.length&&e.creeps.length>0)continue;Memory.observerSchedule.push(r.roomName),o=r.roomName;break}let s=0;const t=this.memory.observer.rooms;if(!o){let e=Number.isInteger(this.memory.observer.lastLookedIndex)?this.memory.observer.lastLookedIndex:t.length;do if(o=e>=t.length?t[0]:t[e+1],e=t.indexOf(o),++s>=t.length)break;while(Memory.observerSchedule.includes(o)||o in Game.rooms);this.memory.observer.lastLookedIndex=e,Memory.observerSchedule.push(o)}const m=e.observeRoom(o);m===ERR_INVALID_ARGS&&s<t.length&&(Memory.observerSchedule.splice(Memory.observerSchedule.indexOf(o),1),this.controlObserver())}},Room.prototype.initObserverRooms=function(){const e=OBSERVER_OBSERVE_RANGE>10?10:OBSERVER_OBSERVE_RANGE,[o,r]=Room.calcGlobalCoordinates(this.name,(e,o)=>[e,o]),[s,t]=Room.calcCardinalDirection(this.name);this.memory.observer.rooms=[];for(let m=o-e;m<o+e;m++)for(let n=r-e;n<r+e;n++){let e=s,o=t,r=m;m<0&&(e="W"===e?"E":"W",r=Math.abs(m)-1),e+=r,r=n,n<0&&(o="N"===o?"S":"N",r=Math.abs(n)-1),o+=r;const i=e+o;OBSERVER_OBSERVE_HIGHWAYS_ONLY&&!Room.isHighwayRoom(i)||i in Game.rooms&&Game.rooms[i].my||Game.map.isRoomAvailable(i)&&this.memory.observer.rooms.push(i)}},Room.prototype.saveObserver=function(){this.memory.observer={},[this.memory.observer.id]=this.find(FIND_MY_STRUCTURES,{filter:e=>e instanceof StructureObserver}).map(e=>e.id),_.isUndefined(this.memory.observer.id)&&delete this.memory.observer}},e.flush=function(){Memory.observerSchedule=[]};