const e=new Creep.Behaviour("recycler");module.exports=e;const t=e.invalidAction;e.invalidAction=function(a){return!(!t.call(this,a)&&a.action.isMember(e.actions()))&&(delete a.data.targetId,delete a.data.path,!0)},e.actions=function(e){return[Creep.action.picking,Creep.action.withdrawing,Creep.action.uncharging,Creep.action.travelling,Creep.action.storing,Creep.action.feeding,Creep.action.dropping,Creep.action.recycling,Creep.action.idle]},e.strategies.recycling={name:`recycling-${e.name}`,isValidAction:function(e){return!e.sum}},e.strategies.uncharging={name:`uncharging-${e.name}`,isValidAction:function(e){return e.data.travelRoom&&e.sum<e.carryCapacity||!1}},e.strategies.withdrawing={name:`withdrawing-${e.name}`,isValidAction:function(e){return e.data.travelRoom&&e.room.storage&&e.room.storage.store.energy>0&&e.sum<e.carryCapacity||!1}},e.strategies.travelling={name:`travelling-${e.name}`,newTarget:function(e){if(!e.data.travelRoom)if(e.data.travelPos)e.data.travelRoom=e.data.travelPos.roomName;else{if(e.room.structures.spawns.length)return null;e.data.travelRoom=e.data.homeRoom}const t=Game.rooms[e.data.travelRoom];let a=t&&(t.storage||t.structures.spawns[0]);return a?a:e}};