let t={};module.exports=t,t.name="recycler",t.run=function(e){e.action&&"idle"!==e.action.name&&e.action.isMember(t.actionPriority())||(delete e.data.targetId,delete e.data.path,this.nextAction(e)),e.action&&e.target?e.action.step(e):logError("Creep without action/activity!\nCreep: "+e.name+"\ndata: "+JSON.stringify(e.data))},t.actionPriority=function(){return[Creep.action.picking,Creep.action.withdrawing,Creep.action.uncharging,Creep.action.travelling,Creep.action.storing,Creep.action.feeding,Creep.action.dropping,Creep.action.recycling,Creep.action.idle]},t.nextAction=function(e){const a=t.actionPriority();for(var n=0;n<a.length;n++){var r=a[n];if(r.isValidAction(e)&&r.isAddableAction(e)&&r.assign(e))return}},t.strategies={defaultStrategy:{name:`default-${t.name}`},recycling:{name:`recycling-${t.name}`,isValidAction:function(t){return!t.sum}},uncharging:{name:`uncharging-${t.name}`,isValidAction:function(t){return t.data.travelRoom&&t.sum<t.carryCapacity||!1}},withdrawing:{name:`withdrawing-${t.name}`,isValidAction:function(t){return t.data.travelRoom&&t.room.storage&&t.room.storage.store.energy>0&&t.sum<t.carryCapacity||!1}},travelling:{name:`travelling-${t.name}`,newTarget:function(t){if(!t.data.travelRoom)if(t.data.travelPos)t.data.travelRoom=t.data.travelPos.roomName;else{if(t.room.structures.spawns.length)return null;t.data.travelRoom=t.data.homeRoom}const e=Game.rooms[t.data.travelRoom];let a=e&&(e.storage||e.structures.spawns[0]);return a?a:t}}},t.selectStrategies=function(e){return[t.strategies.defaultStrategy,t.strategies[e]]};