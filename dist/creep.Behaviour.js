// base class for behaviours
const t=function(t){this.name=t,this.actions=(t=>[]),this.inflowActions=(t=>[]),this.outflowActions=(t=>[]),this.assignAction=function(t,e,n,a){const i=Util.startProfiling(t.name+".assignAction:"+e.name||e,{enabled:PROFILING.BEHAVIOUR});"string"==typeof e&&(e=Creep.action[e]);const s=e.isValidAction(t);if(global.DEBUG&&global.TRACE&&trace("Action",{actionName:e.name,behaviourName:this.name,creepName:t.name,valid:s,Action:"isValidAction"}),!s)return i.checkCPU("!valid",.3),!1;i.checkCPU("valid",.3);const o=e.isAddableAction(t);if(global.DEBUG&&global.TRACE&&trace("Action",{actionName:e.name,behaviourName:this.name,creepName:t.name,addable:o,Action:"isAddableAction"}),!o)return i.checkCPU("!addable",.3),!1;i.checkCPU("addable",.3);const c=e.assignDebounce?e.assignDebounce(t,a,n):e.assign(t,n);return c?(global.DEBUG&&global.TRACE&&trace("Behaviour",{actionName:e.name,behaviourName:this.name,creepName:t.name,assigned:c,Behaviour:"nextAction",Action:"assign",target:t.target.id||t.target.name}),t.data.lastAction=e.name,t.data.lastTarget=t.target.id,i.checkCPU("assigned",.3),!0):(global.DEBUG&&global.TRACE&&trace("Action",{actionName:e.name,behaviourName:this.name,creepName:t.name,assigned:c,Behaviour:"assignAction",Action:"assign"}),i.checkCPU("!assigned",.3),!1)},this.selectInflowAction=function(t){const e=Util.startProfiling("selectInflowAction"+t.name,{enabled:PROFILING.BEHAVIOUR}),n={},a=this.outflowActions(t);for(const i of this.inflowActions(t))if(!n[i.name]&&(n[i.name]=!0,this.assignAction(t,i,void 0,a)))return void e.checkCPU("assigned"+i.name,1.5);return e.checkCPU("!assigned",1.5),Creep.action.idle.assign(t)},this.selectAction=function(t,e){const n=Util.startProfiling("selectAction"+t.name,{enabled:PROFILING.BEHAVIOUR}),a={};for(const i of e)if(!a[i.name]&&(a[i.name]=!0,this.assignAction(t,i)))return void n.checkCPU("assigned"+i.name,1.5);return n.checkCPU("!assigned",1.5),Creep.action.idle.assign(t)},this.nextAction=function(t){return this.selectAction(t,this.actions(t))},this.needEnergy=(t=>t.sum<t.carryCapacity/2),this.nextEnergyAction=function(t){if(this.needEnergy(t))return this.selectInflowAction(t);if(t.data.nextAction&&t.data.nextTarget){const e=Creep.action[t.data.nextAction],n=Game.getObjectById(t.data.nextTarget);if(delete t.data.nextAction,delete t.data.nextTarget,this.assignAction(t,e,n))return!0}return this.selectAction(t,this.outflowActions(t))},this.invalidAction=function(t){return!t.action},this.run=function(t){this.invalidAction(t)&&(t.data.destiny&&t.data.destiny.task&&Task[t.data.destiny.task]&&Task[t.data.destiny.task].nextAction?Task[t.data.destiny.task].nextAction(t):this.nextAction(t)),t.action&&t.target?(global.DEBUG&&global.TRACE&&trace("Behaviour",{actionName:t.action.name,behaviourName:this.name,creepName:t.name,target:t.target.id||t.target.name,Action:"run"}),t.action.step(t)):logError("Creep without action/activity!\nCreep: "+t.name+"\ndata: "+JSON.stringify(t.data))},this.assign=function(t){t.data.creepType=this.name},this.strategies={defaultStrategy:{name:`default-${this.name}`}},this.selectStrategies=function(t){return[this.strategies.defaultStrategy,this.strategies[t]]}};module.exports=t;