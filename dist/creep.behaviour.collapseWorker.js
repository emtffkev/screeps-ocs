const e=new Creep.Behaviour("collapseWorker");module.exports=e,e.inflowActions=(e=>{let n=[Creep.action.picking,Creep.action.withdrawing,Creep.action.uncharging,Creep.action.harvesting,Creep.action.dismantling,Creep.action.reallocating];return e.sum>e.carry.energy&&n.unshift(Creep.action.storing),n}),e.outflowActions=(e=>{const n=e.room.situation.invasion&&e.room.controller&&e.room.controller.level>2;if(n)return[Creep.action.feeding,Creep.action.fueling,Creep.action.repairing];{let r=[Creep.action.feeding,Creep.action.fueling,Creep.action.charging,Creep.action.repairing,Creep.action.building,Creep.action.fortifying,Creep.action.upgrading];return n||(r.push(Creep.action.storing),r.push(Creep.action.dropping)),e.room.controller&&e.room.controller.ticksToDowngrade<500&&r.unshift(Creep.action.upgrading),r}}),e.needEnergy=(e=>Creep.behaviour.worker.needEnergy.call(this,e)),e.nextAction=function(e){return e.room.collapsed?Creep.behaviour.worker.nextAction.call(this,e):(global.DEBUG&&global.TRACE&&trace("Behaviour",{actionName:"recycling",behaviourName:this.name,creepName:e.name,assigned:!0,Behaviour:"nextAction",Action:"assign"}),this.assignAction(e,"recycling"))},e.strategies.defaultStrategy.canWithdrawEnergy=function(e,n){return function(e){return e>0}};