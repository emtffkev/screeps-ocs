const R={};module.exports=R,R.register=function(){Flag.found.on(R=>Room.roomLayout(R))},R.analyzeRoom=function(R,T){T&&R.processConstructionFlags(),R.roadConstruction()},R.extend=function(){Room.roomLayoutArraybject.defineProperties(Room.prototype,{constructionSites:{configurable:!0,get:function(){return _.isUndefined(this._constructionSites)&&(this._constructionSites=this.find(FIND_CONSTRUCTION_SITES)),this._constructionSites}},myConstructionSites:{configurable:!0,get:function(){return _.isUndefined(this._myConstructionSites)&&(this._myConstructionSites=this.find(FIND_MY_CONSTRUCTION_SITES)),this._myConstructionSites}},roadConstructionTrace:{configurable:!0,get:function(){return _.isUndefined(this.memory.roadConstructionTrace)&&(this.memory.roadConstructionTrace={}),this.memory.roadConstructionTrace}}}),Room.prototype.getBestConstructionSiteFor=function(R,T=null){let E;if(E=T?this.constructionSites.filter(T):this.constructionSites,0==E.length)return null;let U=Util.fieldOrFunction(CONSTRUCTION_PRIORITY,this),t=T=>{let E=U.indexOf(T.structureType);return R.getRangeTo(T)+(E<0?1e5:100*E)};return _.min(E,t)},Room.prototype.roadConstruction=function(R=ROAD_CONSTRUCTION_MIN_DEVIATION){if(ROAD_CONSTRUCTION_ENABLE&&Game.time%ROAD_CONSTRUCTION_INTERVAL==0&&(!_.isNumber(ROAD_CONSTRUCTION_ENABLE)||this.my&&!(ROAD_CONSTRUCTION_ENABLE>this.controller.level))){let T=Object.keys(this.roadConstructionTrace).map(R=>{return{n:this.roadConstructionTrace[R],x:R.charCodeAt(0)-32,y:R.charCodeAt(1)-32}}),E=Math.max(ROAD_CONSTRUCTION_ABS_MIN,T.reduce((R,T)=>R+T.n,0)/T.length*R);T=T.filter(R=>{if(R.n>=E){let T=this.lookForAt(LOOK_STRUCTURES,R.x,R.y);return(0===T.length||T[0].structureType===STRUCTURE_RAMPART)&&0===this.lookForAt(LOOK_CONSTRUCTION_SITES,R.x,R.y).length}return!1});let U=R=>{global.DEBUG&&logSystem(this.name,`Constructing new road at ${R.x}'${R.y} (${R.n} traces)`),this.createConstructionSite(R.x,R.y,STRUCTURE_ROAD)};_.forEach(T,U),this.roadConstructionTrace={}}},Room.prototype.processConstructionFlags=function(){if(this.my&&Util.fieldOrFunction(SEMI_AUTOMATIC_CONSTRUCTION,this)){let R=_.size(Game.constructionSites);if(!(R>=100)){const T=this.controller.level,E=new RoomPosition(25,25,this.name),U=[E,!0],t=(T,E)=>{if(!(R>=100)&&T){const U=new RoomPosition(T.x,T.y,T.roomName);if(U){const t=U.lookFor(LOOK_CONSTRUCTION_SITES);if(!t||!t.length){const t=U.lookFor(LOOK_STRUCTURES).filter(R=>!(R instanceof StructureRoad||R instanceof StructureRampart));if(!t||!t.length){const t=U.createConstructionSite(E);Util.fieldOrFunction(REMOVE_CONSTRUCTION_FLAG,this,E)&&t===OK&&(T.name&&(T=Game.flags[T.name],T instanceof Flag&&T.remove()),R++)}}}}};let S=CONTROLLER_STRUCTURES[STRUCTURE_EXTENSION][T]-(this.structures.extensions.length+_.filter(this.constructionSites,R=>R.structureType===STRUCTURE_EXTENSION).length);if(S>0&&FlagDir.filter(FLAG_COLOR.construct,...U).splice(0,S).forEach(R=>{t(R,STRUCTURE_EXTENSION)}),S=CONTROLLER_STRUCTURES[STRUCTURE_SPAWN][T]-(this.structures.spawns.length+_.filter(this.constructionSites,R=>R.structureType===STRUCTURE_SPAWN).length),S>0&&FlagDir.filter(FLAG_COLOR.construct.spawn,...U).splice(0,S).forEach(R=>{t(R,STRUCTURE_SPAWN)}),S=CONTROLLER_STRUCTURES[STRUCTURE_TOWER][T]-(this.structures.towers.length+_.filter(this.constructionSites,R=>R.structureType===STRUCTURE_TOWER).length),S>0&&FlagDir.filter(FLAG_COLOR.construct.tower,...U).splice(0,S).forEach(R=>{t(R,STRUCTURE_TOWER)}),S=CONTROLLER_STRUCTURES[STRUCTURE_LINK][T]-(this.structures.links.all.length+_.filter(this.constructionSites,R=>R.structureType===STRUCTURE_LINK).length),S>0&&FlagDir.filter(FLAG_COLOR.construct.link,...U).splice(0,S).forEach(R=>{t(R,STRUCTURE_LINK)}),S=CONTROLLER_STRUCTURES[STRUCTURE_LAB][T]-(this.structures.labs.all.length+_.filter(this.constructionSites,R=>R.structureType===STRUCTURE_LAB).length),S>0&&FlagDir.filter(FLAG_COLOR.construct.lab,...U).splice(0,S).forEach(R=>{t(R,STRUCTURE_LAB)}),!this.storage&&CONTROLLER_STRUCTURES[STRUCTURE_STORAGE][T]>0&&FlagDir.filter(FLAG_COLOR.construct.storage,...U).splice(0,1).forEach(R=>{t(R,STRUCTURE_STORAGE)}),!this.terminal&&CONTROLLER_STRUCTURES[STRUCTURE_TERMINAL][T]>0&&FlagDir.filter(FLAG_COLOR.construct.terminal,...U).splice(0,1).forEach(R=>{t(R,STRUCTURE_TERMINAL)}),!this.structures.observer&&CONTROLLER_STRUCTURES[STRUCTURE_OBSERVER][T]>0&&FlagDir.filter(FLAG_COLOR.construct.observer,...U).splice(0,1).forEach(R=>{t(R,STRUCTURE_OBSERVER)}),!this.structures.nuker&&CONTROLLER_STRUCTURES[STRUCTURE_NUKER][T]>0&&FlagDir.filter(FLAG_COLOR.construct.nuker,...U).splice(0,1).forEach(R=>{t(R,STRUCTURE_NUKER)}),!this.structures.powerSpawn&&CONTROLLER_STRUCTURES[STRUCTURE_POWER_SPAWN][T]>0&&FlagDir.filter(FLAG_COLOR.construct.powerSpawn,...U).splice(0,1).forEach(R=>{t(R,STRUCTURE_POWER_SPAWN)}),CONTROLLER_STRUCTURES[STRUCTURE_EXTRACTOR][T]>0){const[R]=this.find(FIND_MINERALS),T=R.pos.lookFor(LOOK_STRUCTURES);if(T.length&&T[0]instanceof StructureExtractor)return;t(R.pos,STRUCTURE_EXTRACTOR)}}}},Room.roomLayout=function(R){if(Flag.compare(R,FLAG_COLOR.command.roomLayout)){R=Game.flags[R.name];const T=R.room;if(T){const E=Room.roomLayoutArray,U={[STRUCTURE_SPAWN]:FLAG_COLOR.construct.spawn,[STRUCTURE_TOWER]:FLAG_COLOR.construct.tower,[STRUCTURE_EXTENSION]:FLAG_COLOR.construct,[STRUCTURE_LINK]:FLAG_COLOR.construct.link,[STRUCTURE_STORAGE]:FLAG_COLOR.construct.storage,[STRUCTURE_TERMINAL]:FLAG_COLOR.construct.terminal,[STRUCTURE_NUKER]:FLAG_COLOR.construct.nuker,[STRUCTURE_POWER_SPAWN]:FLAG_COLOR.construct.powerSpawn,[STRUCTURE_OBSERVER]:FLAG_COLOR.construct.observer},[t,S]=[R.pos.x,R.pos.y],o=[],n=[],C=()=>{return R.pos.newFlag(FLAG_COLOR.command.invalidPosition,"NO_ROOM"),R.remove(),!1};for(let O=0;O<E.length;O++)for(let r=0;r<E[O].length;r++){const R=Math.floor(t+(O-E.length/2)+1),_=Math.floor(S+(r-E.length/2)+1);if(R>=50||R<0||_>=50||_<0)return C();const i=T.getPositionAt(R,_),e=E[O]&&E[O][r];if(e){if("wall"===Game.map.getTerrainAt(i))return C();if(e===STRUCTURE_ROAD)n.push(i);else{const R=U[e];o.push({flagColour:R,pos:i})}}}o.forEach(R=>{R.pos.newFlag(R.flagColour)}),_.forEach(n,R=>{return!(_.size(Game.constructionSites)>=100)&&void R.createConstructionSite(STRUCTURE_ROAD)}),R.remove()}}}};