let o={};module.exports=o,o.name="upgrader";let e=o=>["miner","upgrader"].includes(o.data.creepType)&&o.data.determinatedSpot&&(o.data.ttl>o.data.spawningTime||o.data.ttl>o.data.predictedRenewal);o.approach=function(o){let t=new RoomPosition(o.data.determinatedSpot.x,o.data.determinatedSpot.y,o.pos.roomName),r=o.pos.getRangeTo(t);if(r>0){if(o.data.movingToTarget=!0,1===r){const r=t.lookFor(LOOK_CREEPS);r.length&&_.some(r,e)&&delete o.data.determinatedSpot}o.travelTo(t,{range:0})}else o.data.movingToTarget&&(o.room.invalidateCostMatrix(),delete o.data.movingToTarget);return r},o.run=function(o){if(o.room.controller.upgradeBlocked)return void(o.data.creepType="recycler");if(o.action&&"upgrading"===o.action.name||Population.registerAction(o,Creep.action.upgrading,o.room.controller),!o.data.determinatedSpot){let t=(t=false)=>{let r=r=>{let a={spots:[{pos:o.room.controller.pos,range:3},{pos:r.pos,range:1}],checkWalkable:!0,where:r=>!_.some(r.lookFor(LOOK_CREEPS),e)&&(t||0===r.findInRange(o.room.sources,1).length),roomName:o.pos.roomName};return Room.fieldsInRange(a)},a=o.room.structures.links.controller?_.flatten(_.map(o.room.structures.links.controller,r)):[],n=o.room.structures.container.controller?_.flatten(_.map(o.room.structures.container.controller,r)):[],i=o.room.storage?r(o.room.storage):[],l=o.room.terminal?r(o.room.terminal):[];if(a.length){let o=[];return 0===o.length&&n.length&&(o=_.filter(a,o=>_.some(n,e=>e.isEqualTo(o)))),0===o.length&&i.length&&(o=_.filter(a,o=>_.some(i,e=>e.isEqualTo(o)))),0===o.length&&l.length&&(o=_.filter(a,o=>_.some(l,e=>e.isEqualTo(o)))),o.length?o:a}return n.length?n:i.length?i:l},r=t();if(r.length>0&&(r=t(!0)),r.length>0){let e=o.pos.findClosestByPath(r,{filter:e=>{return!_.some(o.room.lookForAt(LOOK_STRUCTURES,e),{structureType:STRUCTURE_ROAD})}});if(e||(e=o.pos.findClosestByPath(r)||r[0]),e){o.data.determinatedSpot={x:e.x,y:e.y};let t=Game.spawns[o.data.motherSpawn];if(t){let r=e.findPathTo(t,{ignoreCreeps:!0});const a=o.data.body?Math.ceil(o.data.body.work/(2*o.data.body.move)):1;r&&(o.data.predictedRenewal=o.data.spawningTime+r.length*a)}}}o.data.determinatedSpot?SAY_ASSIGNMENT&&o.say(String.fromCharCode(9962),SAY_PUBLIC):logError("Unable to determine working location for upgrader in room "+o.pos.roomName)}if(o.data.determinatedSpot){CHATTY&&o.say("upgrading",SAY_PUBLIC);this.approach(o);if(o.room.controller&&o.pos.getRangeTo(o.room.controller)<=3){let e=o.data.body&&o.data.body.work?o.data.body.work:o.carryCapacity/2;if(o.carry.energy<=e){let e=_.find(o.room.structures.links.controller,e=>e.energy>0&&o.pos.isNearTo(e));e||(e=_.find(o.room.structures.container.controller,e=>e.store[RESOURCE_ENERGY]>0&&o.pos.isNearTo(e))),e||(e=o.room.storage&&o.room.storage.charge>0&&o.pos.isNearTo(o.room.storage)),e||(e=o.room.terminal&&o.room.terminal.store[RESOURCE_ENERGY]>.5*TERMINAL_ENERGY&&o.pos.isNearTo(o.room.terminal)),e&&o.withdraw(e,RESOURCE_ENERGY)}o.controllerSign(),o.upgradeController(o.room.controller)}}},o.strategies={defaultStrategy:{name:`default-${o.name}`,moveOptions:function(o){return o||{}}}},o.selectStrategies=function(e){return[o.strategies.defaultStrategy,o.strategies[e]]};