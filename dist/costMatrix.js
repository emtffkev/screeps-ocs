// Wrapper class for PathFinder.CostMatrix to define our own compression
const t=class{constructor(t=new PathFinder.CostMatrix){this._costMatrix=t}clone(){return new t(this._costMatrix.clone())}set(t,n,o){this._costMatrix.set(t,n,o)}get(t,n){return this._costMatrix.get(t,n)}serialize(){const t=t=>t.reduce((n,o,i)=>{return o!==t[i-1]?n.push({count:1,e:o}):n[n.length-1].count++,n},[]).map(({count:count,e:e})=>count>1?`${e}x${count}`:e).join(",");return t(this._costMatrix.serialize())}static deserialize(t){const n=t=>{t=Array.isArray(t)?t.toString():t;const n=t.replace(/(\d+)x(\d+),?/g,(t,n,o)=>_.repeat(n+",",+o)).split(",");return n.pop(),n.map(t=>+t)};return PathFinder.CostMatrix.deserialize(n(t))}};module.exports=t;