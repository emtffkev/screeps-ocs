/* https://github.com/ScreepsOCS/screeps.behaviour-action-pattern */
const e=Game.cpu.getUsed();global.validatePath=(e=>{let a;try{a=require(e)}catch(o){global.DEBUG===!1||o.message&&o.message.startsWith("Unknown module")||console.log('<font style="color:FireBrick">Error loading '+e+" caused by "+(o.stack||o.toString())+"</font>"),a=null}return null!=a}),global.getPath=((e,a=false)=>{if(a||!Memory.modules[e]){let a="./custom."+e;validatePath(a)||(a="./internal."+e,validatePath(a)||(a="./"+e)),Memory.modules[e]=a,a="./internalViral."+e,validatePath(a)?Memory.modules.internalViral[e]=!0:Memory.modules.internalViral[e]&&delete Memory.modules.internalViral[e],a="./viral."+e,validatePath(a)?Memory.modules.viral[e]=!0:Memory.modules.viral[e]&&delete Memory.modules.viral[e]}return Memory.modules[e]}),global.tryRequire=((e,a=false)=>{let o;try{o=require(e)}catch(l){l.message&&l.message.indexOf("Unknown module")>-1?a||console.log(`Module "${e}" not found!`):null==o&&console.log(`Error loading module "${e}"!<br/>${l.stack||l.toString()}`),o=null}return o}),global.inject=((e,a,o)=>{let l=_.keys(a);for(const r of l)if("function"==typeof a[r]){if(o){let a=e[r];e.baseOf||(e.baseOf={}),e.baseOf[o]||(e.baseOf[o]={}),e.baseOf[o][r]||(e.baseOf[o][r]=a)}e[r]=a[r].bind(e)}else null===a[r]||"object"!=typeof e[r]||Array.isArray(e[r])||"object"!=typeof a[r]||Array.isArray(a[r])?e[r]=a[r]:global.inject(e[r],a[r],o)}),global.infect=((e,a,o)=>{if(Memory.modules[a][o]){let l=tryRequire(`./${a}.${o}`);l?global.inject(e,l,a):delete Memory.modules[a][o]}return e}),global.load=(e=>{let a=getPath(e),o=tryRequire(a,!0);return o||(a=getPath(e,!0),o=tryRequire(a)),o&&(o=infect(o,"internalViral",e),o=infect(o,"viral",e)),o}),global.install=(()=>{void 0===Memory.modules?Memory.modules={valid:Game.time,viral:{},internalViral:{}}:_.isUndefined(Memory.modules.valid)&&(Memory.modules.valid=Game.time),global.inject(global,load("global")),_.assign(global,load("parameter")),global.mainInjection=load("mainInjection"),_.assign(global,{Extensions:load("extensions"),Population:load("population"),FlagDir:load("flagDir"),Task:load("task"),Tower:load("tower"),Util:load("util"),Events:load("events"),OCSMemory:load("ocsMemory"),Grafana:GRAFANA?load("grafana"):void 0,Visuals:load("visuals")}),_.assign(global.Util,{DiamondIterator:load("util.diamond.iterator"),SpiralIterator:load("util.spiral.iterator")}),_.assign(global.Task,{guard:load("task.guard"),defense:load("task.defense"),mining:load("task.mining"),claim:load("task.claim"),reserve:load("task.reserve"),pioneer:load("task.pioneer"),attackController:load("task.attackController"),robbing:load("task.robbing"),reputation:load("task.reputation"),labTech:load("task.labTech")}),Creep.Action=load("creep.Action"),Creep.Setup=load("creep.Setup"),_.assign(Creep,{action:{attackController:load("creep.action.attackController"),avoiding:load("creep.action.avoiding"),boosting:load("creep.action.boosting"),building:load("creep.action.building"),bulldozing:load("creep.action.bulldozing"),charging:load("creep.action.charging"),claiming:load("creep.action.claiming"),defending:load("creep.action.defending"),dismantling:load("creep.action.dismantling"),dropping:load("creep.action.dropping"),feeding:load("creep.action.feeding"),fortifying:load("creep.action.fortifying"),fueling:load("creep.action.fueling"),guarding:load("creep.action.guarding"),harvesting:load("creep.action.harvesting"),healing:load("creep.action.healing"),idle:load("creep.action.idle"),invading:load("creep.action.invading"),picking:load("creep.action.picking"),reallocating:load("creep.action.reallocating"),recycling:load("creep.action.recycling"),repairing:load("creep.action.repairing"),reserving:load("creep.action.reserving"),robbing:load("creep.action.robbing"),storing:load("creep.action.storing"),travelling:load("creep.action.travelling"),uncharging:load("creep.action.uncharging"),upgrading:load("creep.action.upgrading"),withdrawing:load("creep.action.withdrawing")},behaviour:{claimer:load("creep.behaviour.claimer"),collapseWorker:load("creep.behaviour.collapseWorker"),hauler:load("creep.behaviour.hauler"),healer:load("creep.behaviour.healer"),labTech:load("creep.behaviour.labTech"),melee:load("creep.behaviour.melee"),miner:load("creep.behaviour.miner"),mineralMiner:load("creep.behaviour.mineralMiner"),remoteMiner:load("creep.behaviour.remoteMiner"),remoteHauler:load("creep.behaviour.remoteHauler"),remoteWorker:load("creep.behaviour.remoteWorker"),pioneer:load("creep.behaviour.pioneer"),privateer:load("creep.behaviour.privateer"),recycler:load("creep.behaviour.recycler"),ranger:load("creep.behaviour.ranger"),upgrader:load("creep.behaviour.upgrader"),worker:load("creep.behaviour.worker")},setup:{hauler:load("creep.setup.hauler"),healer:load("creep.setup.healer"),miner:load("creep.setup.miner"),mineralMiner:load("creep.setup.mineralMiner"),privateer:load("creep.setup.privateer"),upgrader:load("creep.setup.upgrader"),worker:load("creep.setup.worker")}}),global.inject(Creep,load("creep")),global.inject(Room,load("room")),global.inject(Spawn,load("spawn")),Extensions.extend(),Creep.extend(),Room.extend(),Spawn.extend(),FlagDir.extend(),Task.populate(),global.mainInjection.extend&&global.mainInjection.extend(),OCSMemory.activateSegment(MEM_SEGMENTS.COSTMATRIX_CACHE,!0),global.modulesValid=Memory.modules.valid,DEBUG&&logSystem("Global.install","Code reloaded.")}),global.install(),load("traveler")({exportTraveler:!1,installTraveler:!0,installPrototype:!0,defaultStuckValue:TRAVELER_STUCK_TICKS,reportThreshold:TRAVELER_THRESHOLD});let a;module.exports.loop=function(){const o=Game.cpu.getUsed();if(!Memory.pause)try{const l=Util.startProfiling("main",{startCPU:o}),r=Util.startProfiling("main",{enabled:PROFILING.MAIN,startCPU:o});if(r.checkCPU("deserialize memory",5),Memory.CPU_CRITICAL=Memory.CPU_CRITICAL?Game.cpu.bucket<CRITICAL_BUCKET_LEVEL+CRITICAL_BUCKET_OVERFILL:Game.cpu.bucket<CRITICAL_BUCKET_LEVEL,a||(a=o),(_.isUndefined(Memory.modules)||_.isUndefined(global.modulesValid)||global.modulesValid!==Memory.modules.valid)&&global.install(),void 0===Memory.debugTrace&&(Memory.debugTrace={error:!0,no:{}}),void 0===Memory.cloaked&&(Memory.cloaked={}),_.assign(global,load("parameter")),OCSMemory.processSegments(),r.checkCPU("processSegments",PROFILING.ANALYZE_LIMIT),Events.flush(),FlagDir.flush(),Population.flush(),Room.flush(),Task.flush(),global.mainInjection.flush&&global.mainInjection.flush(),r.checkCPU("flush",PROFILING.FLUSH_LIMIT),Room.register(),!FlagDir.analyze())return void logError("FlagDir.analyze failed, waiting one tick to sync flags");r.checkCPU("FlagDir.analyze",PROFILING.ANALYZE_LIMIT),Room.analyze(),r.checkCPU("Room.analyze",PROFILING.ANALYZE_LIMIT),Population.analyze(),r.checkCPU("Population.analyze",PROFILING.ANALYZE_LIMIT),global.mainInjection.analyze&&global.mainInjection.analyze(),Creep.register(),Spawn.register(),Task.register(),global.mainInjection.register&&global.mainInjection.register(),r.checkCPU("register",PROFILING.REGISTER_LIMIT),Population.execute(),r.checkCPU("population.execute",PROFILING.EXECUTE_LIMIT),FlagDir.execute(),r.checkCPU("flagDir.execute",PROFILING.EXECUTE_LIMIT),Room.execute(),r.checkCPU("room.execute",PROFILING.EXECUTE_LIMIT),Creep.execute(),r.checkCPU("creep.execute",PROFILING.EXECUTE_LIMIT),Spawn.execute(),r.checkCPU("spawn.execute",PROFILING.EXECUTE_LIMIT),global.mainInjection.execute&&global.mainInjection.execute(),SEND_STATISTIC_REPORTS&&((!Memory.statistics||Memory.statistics.tick&&Memory.statistics.tick+TIME_REPORT<=Game.time)&&load("statistics").process(),processReports(),r.checkCPU("processReports",PROFILING.FLUSH_LIMIT)),FlagDir.cleanup(),r.checkCPU("FlagDir.cleanup",PROFILING.FLUSH_LIMIT),Population.cleanup(),r.checkCPU("Population.cleanup",PROFILING.FLUSH_LIMIT),Room.cleanup(),r.checkCPU("Room.cleanup",PROFILING.FLUSH_LIMIT),global.mainInjection.cleanup&&global.mainInjection.cleanup(),OCSMemory.cleanup(),r.checkCPU("OCSMemory.cleanup",PROFILING.ANALYZE_LIMIT),ROOM_VISUALS&&!Memory.CPU_CRITICAL&&Visuals.run(),r.checkCPU("visuals",PROFILING.EXECUTE_LIMIT),GRAFANA&&Game.time%GRAFANA_INTERVAL===0&&Grafana.run(),r.checkCPU("grafana",PROFILING.EXECUTE_LIMIT),Game.cacheTime=Game.time,DEBUG&&TRACE&&trace("main",{cpuAtLoad:e,cpuAtFirstLoop:a,cpuAtLoop:o,cpuTick:Game.cpu.getUsed(),isNewServer:global.isNewServer,lastServerSwitch:Game.lastServerSwitch,main:"cpu"}),l.totalCPU()}catch(e){Util.logError(e.stack||e.message)}};