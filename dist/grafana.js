let e={};e.run=function(){let e={time:Game.time,"gcl.progress":Game.gcl.progress,"gcl.progressTotal":Game.gcl.progressTotal,"gcl.level":Game.gcl.level,"cpu.bucket":Game.cpu.bucket,"cpu.limit":Game.cpu.limit,"cpu.getUsed":Game.cpu.getUsed(),"market.credits":Game.market.credits,creeps:_.size(Game.creeps)};for(let r in Game.rooms){const s=Game.rooms[r];if(s&&s.my){e[`room.${r}.myRoom`]=1,e[`room.${r}.energyAvailable`]=s.energyAvailable,e[`room.${r}.energyCapacityAvailable`]=s.energyCapacityAvailable;const t=s.controller;e[`room.${r}.rcl`]=t.level,e[`room.${r}.controllerProgress`]=t.progress,e[`room.${r}.controllerProgressTotal`]=t.progressTotal;const o=s.storage;try{e[`room.${r}.storedEnergy`]=o.store[RESOURCE_ENERGY],e[`room.${r}.storedMineral`]=_.sum(o.store)-o.store[RESOURCE_ENERGY]}catch(s){e[`room.${r}.storedEnergy`]=0,e[`room.${r}.storedMineral`]=0}const c=s.terminal;try{e[`room.${r}.terminalEnergy`]=c.store[RESOURCE_ENERGY],e[`room.${r}.terminalMineral`]=_.sum(c.store)-c.store[RESOURCE_ENERGY]}catch(s){e[`room.${r}.terminalEnergy`]=0,e[`room.${r}.terminalMineral`]=0}}}Memory.stats=e},module.exports=e;