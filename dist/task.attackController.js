// This task will react on Red/Cyan flags, sending a giant (RCL7 Req) claiming creep to the flags position.
let a={};module.exports=a,a.name="attackController",a.register=(()=>{}),a.handleFlagFound=(e=>{e.compareTo(FLAG_COLOR.invade.attackController)&&Task.nextCreepCheck(e,a.name)&&(Util.set(e.memory,"task",a.name),Task.attackController.checkForRequiredCreeps(e))}),a.checkForRequiredCreeps=(e=>{const t=e.pos.roomName;Game.rooms[t];let n=Task.attackController.memory(e);Task.validateAll(n,e,a.name,{roomName:t,checkValid:!0});let o=n.queued.length+n.spawning.length+n.running.length;o<1&&Task.spawn(Task.attackController.creep.attackController,{task:"attackController",targetName:e.name},{targetRoom:e.pos.roomName,minEnergyCapacity:9750,maxRange:5},a=>{n.queued.push({room:a.queueRoom,name:a.name})})}),a.handleSpawningStarted=(e=>{if(e.destiny&&e.destiny.task&&"attackController"==e.destiny.task){let t=Game.flags[e.destiny.targetName];if(t){let n=Task.attackController.memory(t);n.spawning.push(e),Task.validateQueued(n,t,a.name)}}}),a.handleSpawningCompleted=(e=>{if(e.data&&e.data.destiny&&e.data.destiny.task&&"attackController"==e.data.destiny.task){let t=Game.flags[e.data.destiny.targetName];if(t){e.data.predictedRenewal=e.data.spawningTime+50*routeRange(e.data.homeRoom,t.pos.roomName);let n=Task.attackController.memory(t);n.running.push(e.name),Task.validateSpawning(n,t,a.name)}}}),a.handleCreepDied=(e=>{let t=Memory.population[e];if(t&&t.destiny&&t.destiny.task&&"attackController"==t.destiny.task){let n=Game.flags[t.destiny.targetName];if(n){const t=Task.attackController.memory(n);Task.validateRunning(t,n,a.name,{roomName:n.pos.roomName,deadCreep:e})}}}),a.memory=(a=>{return a.memory.tasks||(a.memory.tasks={}),a.memory.tasks.attackController||(a.memory.tasks.attackController={queued:[],spawning:[],running:[]}),a.memory.tasks.attackController}),a.nextAction=(a=>{let e=[Creep.action.attackController,Creep.action.recycling];for(var t=0;t<e.length;t++){var n=e[t];if(n.isValidAction(a)&&n.isAddableAction(a)&&n.assign(a))return}}),a.creep={attackController:{fixedBody:[],multiBody:{[CLAIM]:5,[MOVE]:5},minMulti:1,maxMulti:4,name:"Atk-Contr",behaviour:"claimer",queue:"Low"}};