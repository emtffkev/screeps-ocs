// This task will react on Red/Cyan flags, sending a giant (RCL7 Req) claiming creep to the flags position.
let a={};module.exports=a,a.register=(()=>{}),a.handleFlagFound=(a=>{a.compareTo(FLAG_COLOR.invade.attackController)&&Task.attackController.checkForRequiredCreeps(a)}),a.checkForRequiredCreeps=(a=>{const e=a.pos.roomName;Game.rooms[e];let n=Task.attackController.memory(a),t=n.queued.length+n.spawning.length+n.running.length;t<1&&Task.spawn(Task.attackController.creep.attackController,{task:"attackController",targetName:a.name},{targetRoom:a.pos.roomName,minEnergyCapacity:9750,maxRange:5},a=>{n.queued.push({room:a.queueRoom,name:a.name})})}),a.handleSpawningStarted=(a=>{if(a.destiny&&a.destiny.task&&"attackController"==a.destiny.task){let e=Game.flags[a.destiny.targetName];if(e){let n=Task.attackController.memory(e);n.spawning.push(a);let t=[],o=a=>{let e=Game.rooms[a.room];e.spawnQueueLow.some(e=>e.name==a.name)&&t.push(a)};n.queued.forEach(o),n.queued=t}}}),a.handleSpawningCompleted=(a=>{if(a.data&&a.data.destiny&&a.data.destiny.task&&"attackController"==a.data.destiny.task){let e=Game.flags[a.data.destiny.targetName];if(e){a.data.predictedRenewal=a.data.spawningTime+50*routeRange(a.data.homeRoom,e.pos.roomName);let n=Task.attackController.memory(e);n.running.push(a.name);let t=[],o=a=>{let e=Game.spawns[a.spawn];e&&(e.spawning&&e.spawning.name==a.name||e.newSpawn&&e.newSpawn.name==a.name)&&(count++,t.push(a))};n.spawning.forEach(o),n.spawning=t}}}),a.handleCreepDied=(a=>{let e=Memory.population[a];if(e&&e.destiny&&e.destiny.task&&"attackController"==e.destiny.task){let n=Game.flags[e.destiny.targetName];if(n){let e=Task.attackController.memory(n),t=[],o=e=>{let o=Game.creeps[e];o&&o.name!=a&&void 0!==o.data&&void 0!==o.data.spawningTime&&o.ticksToLive>o.data.spawningTime+50*routeRange(o.data.homeRoom,n.pos.roomName)&&t.push(e)};e.running.forEach(o),e.running=t}}}),a.memory=(a=>{return a.memory.tasks||(a.memory.tasks={}),a.memory.tasks.attackController||(a.memory.tasks.attackController={queued:[],spawning:[],running:[]}),a.memory.tasks.attackController}),a.nextAction=(a=>{let e=[Creep.action.attackController,Creep.action.recycling];for(var n=0;n<e.length;n++){var t=e[n];if(t.isValidAction(a)&&t.isAddableAction(a)&&t.assign(a))return}}),a.creep={attackController:{fixedBody:[],multiBody:{[CLAIM]:5,[MOVE]:5},minMulti:1,maxMulti:4,name:"Atk-Contr",behaviour:"claimer",queue:"Low"}};