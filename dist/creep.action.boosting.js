function isValidMineralType(t){for(const e in BOOSTS)for(const n in BOOSTS[e])if(t===n)return!0;return!1}function getBoostPartType(t){for(const e in BOOSTS)for(const n in BOOSTS[e])if(t===n)return e}function canBoostType(t,e){return!_(t.body).filter({type:e}).every(t=>t.boost)}function isValidAction(t){return!_.every(t.body,t=>t.boost)}function isValidTarget(t,e){return t instanceof StructureLab&&t.isActive()&&t.energy>=LAB_BOOST_ENERGY&&t.mineralAmount>=LAB_BOOST_MINERAL}function isAddableTarget(t,n){const i=this.getBoostPartType(t.mineralType);return e.apply(this,[t,n])&&this.isValidMineralType(t.mineralType)&&n.hasActiveBodyparts(i)&&this.canBoostType(n,i)}function newTarget(t){return _(t.room.structures.all).filter(this.isValidTarget).min(e=>t.pos.getRangeTo(e))}function work(t){return t.target.boostCreep(t)}function onAssignment(t){SAY_ASSIGNMENT&&t.say(ACTION_SAY.BOOSTING,global.SAY_PUBLIC)}const t=new Creep.Action("boosting");module.exports=t,t.maxPerAction=1,t.isValidMineralType=isValidMineralType,t.getBoostPartType=getBoostPartType,t.canBoostType=canBoostType,t.isValidAction=isValidAction,t.isValidTarget=isValidTarget;const e=t.isAddableTarget;t.isAddableTarget=isAddableTarget,t.newTarget=newTarget,t.work=work,t.onAssignment=onAssignment;