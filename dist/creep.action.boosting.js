function isValidMineralType(t){for(const n in BOOSTS)for(const e in BOOSTS[n])if(t===e)return!0;return!1}function getBoostPartType(t){for(const n in BOOSTS)for(const e in BOOSTS[n])if(t===e)return n}function canBoostType(t,n){return!_(t.body).filter({type:n}).every(t=>t.boost)}function isValidAction(t){return!_.every(t.body,t=>t.boost)}function isValidTarget(t,n){return t instanceof StructureLab&&t.energy>=LAB_BOOST_ENERGY&&t.mineralAmount>=LAB_BOOST_MINERAL}function isAddableTarget(t,e){const i=this.getBoostPartType(t.mineralType);return n.apply(this,[t,e])&&this.isValidMineralType(t.mineralType)&&e.hasActiveBodyparts(i)&&this.canBoostType(e,i)}function newTarget(t){return _(t.room.structures.all).filter(this.isValidTarget).min(n=>t.pos.getRangeTo(n))}function work(t){return t.target.boostCreep(t)}function onAssignment(t){SAY_ASSIGNMENT&&t.say(ACTION_SAY.BOOSTING,SAY_PUBLIC)}const t=new Creep.Action("boosting");module.exports=t,t.maxPerAction=1,t.isValidMineralType=isValidMineralType,t.getBoostPartType=getBoostPartType,t.canBoostType=canBoostType,t.isValidAction=isValidAction,t.isValidTarget=isValidTarget;const n=t.isAddableTarget;t.isAddableTarget=isAddableTarget,t.newTarget=newTarget,t.work=work,t.onAssignment=onAssignment;