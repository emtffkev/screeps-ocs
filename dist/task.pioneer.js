// This task will react on pioneer flags - 4 for Green/White, 1 for Green/Red
let e={};module.exports=e,e.name="pioneer",e.register=(()=>{}),e.handleRoomDied=(e=>{const a="collapseWorker";if(!e.population||!e.population.typeCount[a]){let n=!0;if(e.energyAvailable>199){e.spawnQueueHigh.splice(0,e.spawnQueueHigh.length);const o=Task.pioneer.creep.worker;n=!Task.spawn(o,{task:a,targetName:e.name,type:o.behaviour},{explicit:e.name})}if(n){let a=FlagDir.find(FLAG_COLOR.claim.pioneer,e);a||e.newFlag(FLAG_COLOR.claim.pioneer)}}}),e.handleFlagFound=(a=>{a.compareTo(FLAG_COLOR.claim.pioneer)&&Task.nextCreepCheck(a,e.name)&&(Util.set(a.memory,"task",e.name),Task.pioneer.checkForRequiredCreeps(a))}),e.checkForRequiredCreeps=(a=>{if(!a||a.room&&!a.room.my&&!a.room.reserved){if(!PIONEER_UNOWNED)return console.log("Pioneer room not owned",Util.stack());const e=a.room.owner||a.room.reservation;if(e&&!Task.reputation.isAlly(e))return logError(`Pioneer target room owned by ${e}`)}let n=Task.pioneer.memory(a);Task.validateAll(n,a,e.name,{roomName:a.pos.roomName,subKey:"pioneer",checkValid:!0});let o=n.queued.length+n.spawning.length+n.running.length;if(o<1){const e=Task.pioneer.creep.pioneer;Task.spawn(e,{task:"pioneer",targetName:a.name,flagName:a.name,type:e.behaviour},{targetRoom:a.pos.roomName,minEnergyCapacity:400,rangeRclRatio:2},e=>{let n=Task.pioneer.memory(Game.flags[e.destiny.targetName]);n.queued.push({room:e.queueRoom,name:e.name,targetName:a.name})})}}),e.handleSpawningStarted=(a=>{if(a.destiny&&a.destiny.task&&"pioneer"==a.destiny.task){let n=Game.flags[a.destiny.flagName];if(n){let o=Task.pioneer.memory(n);o.spawning.push(a);const i=a.destiny.type,r=i?_.find(Task.pioneer.creep,{behaviour:i}).queue:["Low","High"];Task.validateQueued(o,n,e.name,{queues:[r]})}}}),e.handleSpawningCompleted=(a=>{if(a.data&&a.data.destiny&&a.data.destiny.task&&"pioneer"==a.data.destiny.task){let n=Game.flags[a.data.destiny.flagName];if(n){a.data.predictedRenewal=a.data.spawningTime+50*routeRange(a.data.homeRoom,n.pos.roomName);let o=Task.pioneer.memory(n);o.running.push(a.name),Task.validateSpawning(o,n,e.name)}}}),e.handleCreepDied=(a=>{let n=Memory.population[a];if(n&&n.destiny&&n.destiny.task&&"pioneer"==n.destiny.task){let o=Game.flags[n.destiny.flagName];if(o){let n=Task.pioneer.memory(o);Task.validateRunning(n,o,e.name,{roomName:o.pos.roomName,deadCreep:a})}}}),e.memory=(e=>{return e.memory.tasks||(e.memory.tasks={}),e.memory.tasks.pioneer||(e.memory.tasks.pioneer={queued:[],spawning:[],running:[]}),e.memory.tasks.pioneer}),e.creep={pioneer:{fixedBody:{[CARRY]:2,[MOVE]:2,[WORK]:2},multiBody:[WORK,MOVE,CARRY],name:"pioneer",behaviour:"pioneer",queue:"Low"},worker:{fixedBody:[MOVE,CARRY,WORK],behaviour:"collapseWorker",queue:"High"}};