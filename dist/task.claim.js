// This task will react on claim flags (Green/Green), sending a claiming creep to the flags position.
let e={};module.exports=e,e.name="claim",e.minControllerLevel=3,e.register=(()=>{}),e.handleFlagFound=(a=>{a.compareTo(FLAG_COLOR.claim)&&Task.nextCreepCheck(a,e.name)&&(Util.set(a.memory,"task",e.name),Task.claim.checkForRequiredCreeps(a))}),e.checkForRequiredCreeps=(a=>{let n=Task.claim.memory(a);Task.validateAll(n,a,e.name,{roomName:a.pos.roomName,checkValid:!0});let m=n.queued.length+n.spawning.length+n.running.length;m<1&&Task.spawn(Task.claim.creep.claimer,{task:"claim",targetName:a.name,flagName:a.name},{targetRoom:a.pos.roomName,minEnergyCapacity:650},e=>{let n=Task.claim.memory(Game.flags[e.destiny.targetName]);n.queued.push({room:e.queueRoom,name:e.name,targetName:a.name})})}),e.handleSpawningStarted=(a=>{if(a.destiny&&a.destiny.task&&"claim"==a.destiny.task){let n=Game.flags[a.destiny.flagName];if(n){let m=Task.claim.memory(n);m.spawning.push(a),Task.validateQueued(m,n,e.name)}}}),e.handleSpawningCompleted=(a=>{if(a.data&&a.data.destiny&&a.data.destiny.task&&"claim"==a.data.destiny.task){let n=Game.flags[a.data.destiny.flagName];if(n){a.data.predictedRenewal=a.data.spawningTime+50*routeRange(a.data.homeRoom,n.pos.roomName);let m=Task.claim.memory(n);m.running.push(a.name),Task.validateSpawning(m,n,e.name)}}}),e.handleCreepDied=(a=>{let n=Memory.population[a];if(n&&n.destiny&&n.destiny.task&&"claim"==n.destiny.task){let m=Game.flags[n.destiny.flagName];if(m){const n=Task.claim.memory(m);Task.validateRunning(n,m,e.name,{roomName:m.pos.roomName,deadCreep:a})}}}),e.memory=(e=>{return e.memory.tasks||(e.memory.tasks={}),e.memory.tasks.claim||(e.memory.tasks.claim={queued:[],spawning:[],running:[]}),e.memory.tasks.claim}),e.nextAction=(e=>{let a=[Creep.action.claiming,Creep.action.recycling];for(var n=0;n<a.length;n++){var m=a[n];if(m.isValidAction(e)&&m.isAddableAction(e)&&m.assign(e))return}}),e.creep={claimer:{fixedBody:[CLAIM,MOVE],multiBody:[],name:"claimer",behaviour:"claimer",queue:"Low"}};